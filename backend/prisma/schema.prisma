// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String?  @unique
  address   Address? @relation(name: "UserAddress", fields: [addressId], references: [id])
  addressId String?  @unique
  password  String

  fcmToken String?
  whatsappNumber String?

  isEmailVerified Boolean @default(false)
  isPhoneVerified Boolean @default(false)

  loyaltyStatus LoyaltyStatus? @default(BRONZE)
  otpSessions   OTPSession[]
  bookings        ServiceBooking[]
  subscriptions Subscription[]
  tdsLogs       TDSLog[]
  notifications Notification[]
  whatsappLogs  WhatsAppLog[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Address {
  id         String @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String

  user User? @relation(name: "UserAddress")
}

enum LoyaltyStatus {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model Admin {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String // hashed password
  role      AdminRole @default(STAFF)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  ServiceDefinition[]
}

enum AdminRole {
  SUPERADMIN
  STAFF
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  description String?
  image       String?
  inventory   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ServiceDefinition {
  id          String   @id @default(uuid())
  name        String
  description String?
  type        ServiceType
  image       String?
  price       Float?

  duration    Int?
  isActive    Boolean @default(true)

  createdBy   Admin    @relation(fields: [adminId], references: [id])
  adminId     String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings    ServiceBooking[]
}

model ServiceBooking {
  id               String          @id @default(uuid())
  user             User            @relation(fields: [userId], references: [id])
  userId           String

  service          ServiceDefinition @relation(fields: [serviceId], references: [id])
  serviceId        String

  slot             Slot            @relation(fields: [slotId], references: [id])
  slotId           String

  status           ServiceStatus   @default(PENDING)
  beforeImageUrl   String?
  afterImageUrl    String?

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Slot {
  id         String           @id @default(uuid())
  startTime  DateTime
  endTime    DateTime
  bookings   ServiceBooking[]

  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum ServiceType {
  AMC
  URGENT
}

enum ServiceStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Subscription {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  planType     String // e.g. "Monthly", "Annual", etc.
  startDate    DateTime
  endDate      DateTime
  loyaltyBadge String? // optional display badge
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model TDSLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tdsValue  Int
  timestamp DateTime @default(now())
}

model Notification {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  message   String
  status    NotificationStatus
  sentAt    DateTime?
  createdAt DateTime           @default(now())
}

enum NotificationType {
  FCM
  WHATSAPP
  EMAIL
}

enum NotificationStatus {
  SENT
  PENDING
  FAILED
}

model WhatsAppLog {
  id          String              @id @default(uuid())
  user        User                @relation(fields: [userId], references: [id])
  userId      String
  messageType WhatsAppMessageType
  content     String
  timestamp   DateTime            @default(now())
}

enum WhatsAppMessageType {
  TEXT
  BUTTON
  IMAGE
  VIDEO
  AUDIO
}

model OTPSession {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  otpCode   String
  channel   OTPChannel
  expiresAt DateTime
  verified  Boolean    @default(false)
  createdAt DateTime   @default(now())
}

enum OTPChannel {
  EMAIL
  PHONE
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
